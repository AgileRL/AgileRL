from contextlib import contextmanager
from typing import Any, Callable, Dict, Generator, List, Tuple

import gymnasium as gym
import torch
from datasets import load_dataset
from torch.utils.data import DataLoader
from transformers import AutoTokenizer
from transformers.tokenization_utils_base import BatchEncoding

REASONING_SYSTEM_PROMPT = (
    "A conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant "
    "first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning "
    "process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., "
    "<think> reasoning process here </think><answer> answer here </answer>"
)


class HuggingFaceGym(gym.Env):
    """Class to convert HuggingFace datasets into Gymnasium style environment.

    :param dataset_name: Dataset name to be loaded from HuggingFace datasets.
    :type dataset_name: str
    :param tokenizer: Tokenizer to be used for encoding and decoding the prompts.
    :type tokenizer: AutoTokenizer
    :param reward_fn: Reward function for evaluating completions.
    :type reward_fn: Callable[..., float]
    :param system_prompt: System prompt, defaults to REASONING_SYSTEM_PROMPT
    :type system_prompt: str, optional
    :param max_answer_tokens: Max number of answer tokens, defaults to 512
    :type max_answer_tokens: int, optional
    :param data_batch_size: DataLoader batch size, defaults to 8
    :type data_batch_size: int, optional
    """

    def __init__(
        self,
        dataset_name: str,
        tokenizer: AutoTokenizer,
        reward_fn: Callable[..., float],
        system_prompt: str = REASONING_SYSTEM_PROMPT,
        max_answer_tokens: int = 512,
        data_batch_size: int = 8,
    ) -> None:
        self.name = dataset_name
        self.reward_fn = reward_fn
        self.system_prompt = system_prompt
        self.tokenizer = tokenizer
        raw_dataset = load_dataset(dataset_name, "main")
        self.train_dataset = raw_dataset["train"]
        self.test_dataset = raw_dataset["test"]
        self.train_dataloader = DataLoader(
            self.train_dataset, batch_size=data_batch_size, shuffle=True
        )
        self.test_dataloader = DataLoader(
            self.test_dataset, batch_size=data_batch_size, shuffle=False
        )
        self.train_dataloader_iter = iter(self.train_dataloader)
        self.test_dataloader_iter = iter(self.test_dataloader)
        self.dataloader = self.train_dataloader_iter
        self.reset_called = False
        self.observation_space = gym.spaces.Box(low=0, high=tokenizer.vocab_size - 1)
        self.action_space = gym.spaces.Box(
            low=0,
            high=tokenizer.vocab_size - 1,
            shape=(
                max_answer_tokens,
            ),  # NOTE: This shape is a max shape, actual shape may vary unless there's padding
        )
        self.eval_mode = False

    def step(
        self, completions: torch.Tensor
    ) -> Tuple[List[BatchEncoding], torch.Tensor]:
        """Take a step in the HuggingFaceGym environment, calculate rewards from completions generated from previous prompt and provide new batch
        of prompts.

        :param completions: Completion IDs generated by the agent.
        :type completions: torch.Tensor
        :return: New tokenized prompts and an information dictionary.
        :rtype: Tuple[List[BatchEncoding], torch.Tensor]
        """
        self.reset_called = False
        rewards = self._decode_and_evaluate(completions)
        new_tokenized_prompts = self._get_next_batch()
        self.last_tokenized_prompts = new_tokenized_prompts
        return new_tokenized_prompts, rewards

    def reset(self) -> Tuple[List[BatchEncoding], Dict[str, Any]]:
        self._reset_dataloader()
        if self.reset_called:
            raise RuntimeError(
                "env.reset() cannot be called more than once sequentially, it must follow with env.step()."
            )
        self.reset_called = True
        self.info = {}
        new_tokenized_prompts = self._get_next_batch()
        self.last_tokenized_prompts = new_tokenized_prompts
        return new_tokenized_prompts, self.info

    def _decode_and_evaluate(self, completions: List[torch.Tensor]) -> torch.Tensor:
        # This is for a batch of completions (prompt_batch x group_size), List of tensors of length batch size, each tensor is a group of answers
        total_rewards = []
        if self.eval_mode:
            decoded_completions = []
        for idx, (group_completion, answer) in enumerate(
            zip(completions, self.answers)
        ):  # Vectorize this in the future
            decoded_group_completion = self.tokenizer.batch_decode(
                group_completion[
                    :, self.last_tokenized_prompts[idx]["input_ids"].shape[1] :
                ],
                skip_special_tokens=True,
            )
            if self.eval_mode:
                decoded_completions.append(decoded_group_completion)
            rewards = [
                self.reward_fn(completion, answer)
                for completion in decoded_group_completion
            ]
            total_rewards.append(rewards)
        # Shape of the returned tensor is (batch_size X group_size)
        if self.eval_mode:
            for idx, answer in enumerate(decoded_completions):
                print(f"Question: {self.questions[idx]}")
                print(f"Answer: {answer}")
                print(f"Correct answer: {self.answers[idx]}")
                print(f"Rewards: {total_rewards[idx]}")
                print("\n")
        return torch.tensor(total_rewards)

    def _get_next_batch(self) -> List[BatchEncoding]:
        batch = next(self.dataloader)
        self.questions = batch["question"]
        print(self.questions)
        self.answers = batch["answer"]
        tokenized_prompts = [
            apply_chat_template(question, self.system_prompt, self.tokenizer)
            for question in self.questions
        ]
        return tokenized_prompts

    @contextmanager
    def eval(self) -> Generator[None, None, None]:
        self.dataloader = self.test_dataloader_iter
        self.eval_mode = True
        yield
        self.dataloader = self.train_dataloader_iter
        self.eval_mode = False

    def __len__(self):
        return len(self.train_dataloader)

    def _reset_dataloaders(self):
        self.train_dataloader_iter = iter(self.train_dataloader)
        self.test_dataloader_iter = iter(self.test_dataloader)


def apply_chat_template(
    question: str, system_prompt: str, tokenizer: AutoTokenizer
) -> BatchEncoding:
    conversation = [
        {
            "role": "system",
            "content": system_prompt,
        },
        {
            "role": "user",
            "content": question,
        },
    ]
    updated_prompt = tokenizer.apply_chat_template(
        conversation, tokenize=False, add_generation_prompt=True
    )
    tokenized_prompt = tokenizer(
        [updated_prompt],
        return_tensors="pt",
        padding=True,
        padding_side="left",
        return_attention_mask=True,
    )
    return tokenized_prompt
